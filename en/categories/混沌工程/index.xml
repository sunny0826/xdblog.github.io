<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>混沌工程 on GuoXD Blog</title>
    <link>https://guoxudong.io/en/categories/%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/</link>
    <description>Recent content in 混沌工程 on GuoXD Blog</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&lt;a rel=&#39;license&#39; href=&#39;http://creativecommons.org/licenses/by-nc/4.0/&#39; target=&#39;_blank&#39;&gt;知识共享署名-非商业性使用 4.0 国际许可协议&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 09 Jun 2020 11:14:09 +0800</lastBuildDate>
    
	    <atom:link href="https://guoxudong.io/en/categories/%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ChaosBlade：从零开始的混沌工程（二）</title>
      <link>https://guoxudong.io/en/post/start-chaosblade-1/</link>
      <pubDate>Tue, 09 Jun 2020 11:14:09 +0800</pubDate>
      
      <guid>https://guoxudong.io/en/post/start-chaosblade-1/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;在上篇文章中，我们介绍了&lt;strong&gt;混沌工程&lt;/strong&gt;以及 &lt;strong&gt;ChaosBlade&lt;/strong&gt;。从本篇开始，从 ChaosBlade 的安装部署，到实验的创建销毁，在实践的角度，一步步的完成各种混沌实验，深入认识和使用混沌工程。&lt;/p&gt;

&lt;h2 id=&#34;chaosblade-operator&#34;&gt;ChaosBlade-Operator&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator&#34; target=&#34;_blank&#34;&gt;ChaosBlade-Operator&lt;/a&gt; 是 ChaosBlade 的 Kubernetes 平台实验场景实现。将混沌实验通过 Kubernetes 标准的 CRD 方式定义，用户可以像定义 Deployment 或 StatefulSet 那样定义 ChaosBlade 实验，只要对 &lt;code&gt;kubectl&lt;/code&gt; 和 Kubernetes 对象有所了解，就可以轻松的创建、更新和删除实验场景；同时也可以通过 chaosblade cli 工具来操作实验场景。&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;ChaosBlade-Operator 需要使用 Helm 安装，进入 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade-operator/releases&#34; target=&#34;_blank&#34;&gt;release 页面&lt;/a&gt; 下载安装包（ChaosBlade 还提供了阿里云 OSS 的下载地址，提升国内下载速度）。&lt;/p&gt;

&lt;p&gt;使用 Helm 3 安装：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 下载安装包
$ wget -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz
# 为 chaosblade 创建一个 namespace
$ kubectl create namespace chaosblade
# 安装 ChaosBlade-Operator
$ helm install chaos chaosblade-operator-0.6.0.tgz --set webhook.enable=true --namespace=chaosblade
# 查看安装结果
$ kubectl get pod -n chaosblade | grep chaosblade
chaosblade-operator-6b6b484599-gdgq8   1/1     Running   0          4d23h
chaosblade-tool-7wtph                  1/1     Running   0          4d20h
chaosblade-tool-r4zdk                  1/1     Running   0          4d23h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ChaosBlade-Operator 启动后将会在每个节点部署一个 &lt;code&gt;chaosblade-tool&lt;/code&gt; Pod 和一个 &lt;code&gt;chaosblade-operator&lt;/code&gt; Pod，如果都运行正常，则安装成功。上面设置 &lt;code&gt;--set webhook.enable=true&lt;/code&gt; 是为了 Pod 文件系统 I/O 故障实验，如果不需要进行该实验，则无需添加该设置。&lt;/p&gt;

&lt;h2 id=&#34;快速开始&#34;&gt;快速开始&lt;/h2&gt;

&lt;p&gt;下面就以 Pod 网络延迟实验为例，展示如何使用 ChaosBlade-Operator。&lt;/p&gt;

&lt;h3 id=&#34;实验准备&#34;&gt;实验准备&lt;/h3&gt;

&lt;p&gt;实验前需要先准备实验对象，这里使用 &lt;a href=&#34;https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6&#34; target=&#34;_blank&#34;&gt;guestbook&lt;/a&gt; 应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;同样使用 Helm 3&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# add repo
helm repo add apphub-incubator https://apphub.aliyuncs.com/incubator/
# 安装
helm install guestbook apphub-incubator/guestbook --set service.type=NodePort --namespace=chaosblade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认的 Service 类型为 &lt;code&gt;LoadBalancer&lt;/code&gt;，这里为了方便访问设置为了 &lt;code&gt;NodePort&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;开始实验&#34;&gt;开始实验&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;实验目标：&lt;/strong&gt;对 chaosblade 命名空间中，对 &lt;code&gt;redis-master-68857cd57c-dzbs9&lt;/code&gt; Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实验 yaml 配置&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: chaosblade.io/v1alpha1
kind: ChaosBlade
metadata:
  name: delay-pod-network-by-names
spec:
  experiments:
  - scope: pod
    target: network
    action: delay
    desc: &amp;quot;delay pod network by names&amp;quot;
    matchers:
    - name: names
      value:
      - &amp;quot;redis-master-68857cd57c-dzbs9&amp;quot;
    - name: namespace
      value:
      - &amp;quot;chaosblade&amp;quot;
    - name: local-port
      value: [&amp;quot;6379&amp;quot;]
    - name: interface
      value: [&amp;quot;eth0&amp;quot;]
    - name: time
      value: [&amp;quot;3000&amp;quot;]
    - name: offset
      value: [&amp;quot;1000&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将其保存为 &lt;code&gt;delay_pod_network_by_names.yaml&lt;/code&gt; 并执行命令，开始实验：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl apply -f delay_pod_network_by_names.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;查看实验状态&#34;&gt;查看实验状态&lt;/h3&gt;

&lt;p&gt;执行 &lt;code&gt;kubectl get blade delay-pod-network-by-names -o json&lt;/code&gt; 命令，查看实验状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;apiVersion&amp;quot;: &amp;quot;chaosblade.io/v1alpha1&amp;quot;,
    &amp;quot;kind&amp;quot;: &amp;quot;ChaosBlade&amp;quot;,
    &amp;quot;metadata&amp;quot;: {
        &amp;quot;annotations&amp;quot;: {
            &amp;quot;kubectl.kubernetes.io/last-applied-configuration&amp;quot;: &amp;quot;{\&amp;quot;apiVersion\&amp;quot;:\&amp;quot;chaosblade.io/v1alpha1\&amp;quot;,\&amp;quot;kind\&amp;quot;:\&amp;quot;ChaosBlade\&amp;quot;,\&amp;quot;metadata\&amp;quot;:{\&amp;quot;annotations\&amp;quot;:{},\&amp;quot;name\&amp;quot;:\&amp;quot;delay-pod-network-by-names\&amp;quot;},\&amp;quot;spec\&amp;quot;:{\&amp;quot;experiments\&amp;quot;:[{\&amp;quot;action\&amp;quot;:\&amp;quot;delay\&amp;quot;,\&amp;quot;desc\&amp;quot;:\&amp;quot;delay pod network by names\&amp;quot;,\&amp;quot;matchers\&amp;quot;:[{\&amp;quot;name\&amp;quot;:\&amp;quot;names\&amp;quot;,\&amp;quot;value\&amp;quot;:[\&amp;quot;redis-master-68857cd57c-dzbs9\&amp;quot;]},{\&amp;quot;name\&amp;quot;:\&amp;quot;namespace\&amp;quot;,\&amp;quot;value\&amp;quot;:[\&amp;quot;chaosblade\&amp;quot;]},{\&amp;quot;name\&amp;quot;:\&amp;quot;local-port\&amp;quot;,\&amp;quot;value\&amp;quot;:[\&amp;quot;6379\&amp;quot;]},{\&amp;quot;name\&amp;quot;:\&amp;quot;interface\&amp;quot;,\&amp;quot;value\&amp;quot;:[\&amp;quot;eth0\&amp;quot;]},{\&amp;quot;name\&amp;quot;:\&amp;quot;time\&amp;quot;,\&amp;quot;value\&amp;quot;:[\&amp;quot;3000\&amp;quot;]},{\&amp;quot;name\&amp;quot;:\&amp;quot;offset\&amp;quot;,\&amp;quot;value\&amp;quot;:[\&amp;quot;1000\&amp;quot;]}],\&amp;quot;scope\&amp;quot;:\&amp;quot;pod\&amp;quot;,\&amp;quot;target\&amp;quot;:\&amp;quot;network\&amp;quot;}]}}\n&amp;quot;
        },
        &amp;quot;creationTimestamp&amp;quot;: &amp;quot;2020-06-02T05:57:50Z&amp;quot;,
        &amp;quot;finalizers&amp;quot;: [
            &amp;quot;finalizer.chaosblade.io&amp;quot;
        ],
        &amp;quot;generation&amp;quot;: 1,
        &amp;quot;name&amp;quot;: &amp;quot;delay-pod-network-by-names&amp;quot;,
        &amp;quot;resourceVersion&amp;quot;: &amp;quot;7710394&amp;quot;,
        &amp;quot;selfLink&amp;quot;: &amp;quot;/apis/chaosblade.io/v1alpha1/chaosblades/delay-pod-network-by-names&amp;quot;,
        &amp;quot;uid&amp;quot;: &amp;quot;1235ff55-8256-4caa-a371-e1abf6c9e7b7&amp;quot;
    },
    &amp;quot;spec&amp;quot;: {
        &amp;quot;experiments&amp;quot;: [
            {
                &amp;quot;action&amp;quot;: &amp;quot;delay&amp;quot;,
                &amp;quot;desc&amp;quot;: &amp;quot;delay pod network by names&amp;quot;,
                &amp;quot;matchers&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;names&amp;quot;,
                        &amp;quot;value&amp;quot;: [
                            &amp;quot;redis-master-68857cd57c-dzbs9&amp;quot;
                        ]
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;namespace&amp;quot;,
                        &amp;quot;value&amp;quot;: [
                            &amp;quot;chaosblade&amp;quot;
                        ]
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;local-port&amp;quot;,
                        &amp;quot;value&amp;quot;: [
                            &amp;quot;6379&amp;quot;
                        ]
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;interface&amp;quot;,
                        &amp;quot;value&amp;quot;: [
                            &amp;quot;eth0&amp;quot;
                        ]
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;time&amp;quot;,
                        &amp;quot;value&amp;quot;: [
                            &amp;quot;3000&amp;quot;
                        ]
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;offset&amp;quot;,
                        &amp;quot;value&amp;quot;: [
                            &amp;quot;1000&amp;quot;
                        ]
                    }
                ],
                &amp;quot;scope&amp;quot;: &amp;quot;pod&amp;quot;,
                &amp;quot;target&amp;quot;: &amp;quot;network&amp;quot;
            }
        ]
    },
    &amp;quot;status&amp;quot;: {
        &amp;quot;expStatuses&amp;quot;: [
            {
                &amp;quot;action&amp;quot;: &amp;quot;delay&amp;quot;,
                &amp;quot;resStatuses&amp;quot;: [
                    {
                        &amp;quot;id&amp;quot;: &amp;quot;a86f8cf8b68ace98&amp;quot;,
                        &amp;quot;kind&amp;quot;: &amp;quot;pod&amp;quot;,
                        &amp;quot;name&amp;quot;: &amp;quot;redis-master&amp;quot;,
                        &amp;quot;nodeName&amp;quot;: &amp;quot;keking&amp;quot;,
                        &amp;quot;state&amp;quot;: &amp;quot;Success&amp;quot;,
                        &amp;quot;success&amp;quot;: true,
                        &amp;quot;uid&amp;quot;: &amp;quot;619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60&amp;quot;
                    }
                ],
                &amp;quot;scope&amp;quot;: &amp;quot;pod&amp;quot;,
                &amp;quot;state&amp;quot;: &amp;quot;Success&amp;quot;,
                &amp;quot;success&amp;quot;: true,
                &amp;quot;target&amp;quot;: &amp;quot;network&amp;quot;
            }
        ],
        &amp;quot;phase&amp;quot;: &amp;quot;Running&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到实验成功创建了。&lt;/p&gt;

&lt;h3 id=&#34;观测结果&#34;&gt;观测结果&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 获取实验 pod ip
$ kubectl get pod -l app=redis,role=master -o jsonpath={.items..status.podIP}
10.42.69.44
# 进入观测 pod
$ kubectl exec -it redis-slave-6dd975d4c8-2zrkb bash
# 在 pod 中安装 telnet
$ apt-get update &amp;amp;&amp;amp; apt-get install -y telnet
# 测试时间
$ time echo &amp;quot;&amp;quot; | telnet 10.42.69.44 6379
Trying 10.42.69.44...
Connected to 10.42.69.44.
Escape character is &#39;^]&#39;.
Connection closed by foreign host.

real    0m3.790s
user    0m0.007s
sys     0m0.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm2deqtdwg20p606c1kx.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到结果符合预期。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;停止实验&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;执行命令：&lt;code&gt;kubectl delete -f delay_pod_network_by_names.yaml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者直接删除 blade 资源：&lt;code&gt;kubectl delete blade delay-pod-network-by-names&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;本篇我们讲解了如何部署 ChaosBlade-Operator 并进行了简单的实验，可以看到在云原生场景下，ChaosBlade 依旧有着简单的操作方式，多种实验场景，并对混沌实验模型进行了标准化实现。很友好的将混沌实验模型与 Kubernetes 声明式设计结合在一起，依靠混沌实验模型便捷开发场景的同时，又可以很好的结合 Kubernetes 设计理念。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChaosBlade：从零开始的混沌工程（一）</title>
      <link>https://guoxudong.io/en/post/start-chaosblade-0/</link>
      <pubDate>Thu, 04 Jun 2020 17:02:58 +0800</pubDate>
      
      <guid>https://guoxudong.io/en/post/start-chaosblade-0/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;随着微服务的盛行以及容器技术的普及，借助 Kubernetes 的容器编排能力，部署一套分布式系统的难度也越来越低。但随之而来的是越来越复杂的系统，以及越来越难的系统可靠性测试，有时仅仅是一个接口的故障，就可能导致整个系统的雪崩。在雪崩中，找到那个最初故障的接口也十分困难，因为到处都在报错。&lt;/p&gt;

&lt;p&gt;为了解决这些问题，除了不断减少服务的耦合，建立强大的监控系统以及设置熔断、限流等策略等方式，这时&lt;strong&gt;混沌工程&lt;/strong&gt;就出现了。&lt;/p&gt;

&lt;h2 id=&#34;什么是混沌工程&#34;&gt;什么是混沌工程&lt;/h2&gt;

&lt;p&gt;根据&lt;a href=&#34;https://principlesofchaos.org&#34; target=&#34;_blank&#34;&gt;混沌工程原则（PRINCIPLES OF CHAOS ENGINEERING）&lt;/a&gt;：&lt;strong&gt;混沌工程是在分布式系统上进行实验的学科, 目的是建立对系统抵御生产环境中失控条件的能力以及信心。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大规模分布式软件系统的发展正在改变软件工程。作为一个行业，我们很快就采用了提高开发灵活性和部署速度的实践。但伴随着这些优点，一个迫切问题出现了，那就是：我们对投入生产的复杂系统有多少信心？&lt;/p&gt;

&lt;p&gt;即使分布式系统中的所有单个服务都正常运行, 但这些服务之间的交互也会导致不可预知的结果。这些不可预知的结果, 由影响生产环境的罕见且具有破坏性的事件复合而成，令这些分布式系统存在内在的混沌。&lt;/p&gt;

&lt;p&gt;需要在异常行为出现之前，在整个系统内找出这些弱点。这些弱点包括以下形式:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当服务不可用时的不正确回滚设置&lt;/li&gt;
&lt;li&gt;不当的超时设置导致的重试风暴&lt;/li&gt;
&lt;li&gt;由于下游依赖的流量过载导致的服务中断&lt;/li&gt;
&lt;li&gt;单点故障时的级联失败等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这些弱点通过生产环境暴露给用户之前，必须主动的发现这些重要的弱点。并需要一种方法来管理这些系统固有的混沌, 通过增加的灵活性和速率以提升我们对生产环境部署的信心, 尽管系统的复杂性是由这些部署所导致的。&lt;/p&gt;

&lt;p&gt;采用基于经验和系统的方法解决了分布式系统在规模增长时引发的问题, 并以此建立对系统抵御这些事件的能力和信心。通过在受控实验中观察分布式系统的行为来了解它的特性，我们称之为&lt;strong&gt;混沌工程&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;chaosblade&#34;&gt;ChaosBlade&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://tvax3.sinaimg.cn/large/ad5fbf65gy1gfh7pe8dxnj21d407mgly.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade&#34; target=&#34;_blank&#34;&gt;ChaosBlade&lt;/a&gt; 中文名混沌之刃，是阿里巴巴开源的一款遵循混沌工程原理和混沌实验模型的实验注入工具，是内部项目 MonkeyKing 对外开源的项目，其建立在阿里巴巴近十年故障测试和演练实践基础上，结合了集团各业务的最佳创意和实践。旨在帮助企业提升分布式系统的容错能力，并且在企业上云或往云原生系统迁移过程中业务连续性提供保障。&lt;/p&gt;

&lt;p&gt;目前支持的场景有：&lt;code&gt;基础资源&lt;/code&gt;、&lt;code&gt;Java 应用&lt;/code&gt;、&lt;code&gt;C++ 应用&lt;/code&gt;、&lt;code&gt;Docker 容器&lt;/code&gt;以及 &lt;code&gt;Kubernetes 平台&lt;/code&gt;。该项目将场景按领域实现封装成单独的项目，不仅可以使领域内场景标准化实现，而且非常方便场景水平和垂直扩展，通过遵循混沌实验模型，实现 chaosblade cli 统一调用。&lt;/p&gt;

&lt;p&gt;该项目体验极好，仅需一个可执行文件 &lt;code&gt;blade&lt;/code&gt;，就可完成多种场景的实验（一些复杂场景如 Java 应用实验，则需要相关工具包），同时如果不想下载 chaosblade 工具包，快速体验 chaosblade，可以拉取 docker 镜像并运行，在容器内体验。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gfh7yajpkkg212i0mqu0y.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;快速体验&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;该项目于 2020 年 5 月 27 日发布了最新了 &lt;a href=&#34;https://github.com/chaosblade-io/chaosblade/releases/tag/v0.6.0&#34; target=&#34;_blank&#34;&gt;v0.6.0&lt;/a&gt; 版本，本系列文章的全部实践也将基于这个版本以及该版本的修复版本 v0.6.x 进行。&lt;/p&gt;

&lt;h2 id=&#34;chaosblade-operator&#34;&gt;ChaosBlade-Operator&lt;/h2&gt;

&lt;p&gt;ChaosBlade-Operator 是 ChaosBlade 的 Kubernetes 平台实验场景实现，也是本系列文章主要使用的工具。其将混沌实验通过 Kubernetes 标准的 CRD 方式定义，很方便的使用 Kubernetes 资源操作的方式来创建、更新、删除实验场景，包括使用 kubectl、client-go 等方式执行，而且还可以使用上述的 chaosblade cli 工具执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65gy1gfh84jo6dgg20p606c1kx.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;Pod 网络延迟场景&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;本篇为系列文章开篇，主要介绍混动工程以及混沌工程实验工具 ChaosBlade，后续会从实践的角度带领读者上手实践混沌工程，了解混沌工程的方法及原理。实践出真知，在后续的文章后，我们将从 ChaosBlade-Operator 的安装部署、实验配置、实验观测及实验销毁等方面，详细介绍 ChaosBlade 的功能。同时也会介绍在不同场景下混沌工程是如何帮助开发者发现系统中的问题，并达到逐渐建设高可用的韧性系统的目的。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wizardbyron/principlesofchaos_zh-cn&#34; target=&#34;_blank&#34;&gt;混沌工程原则&lt;/a&gt; - Principlesofchaos.org&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chaosblade-io/chaosblade&#34; target=&#34;_blank&#34;&gt;ChaosBlade&lt;/a&gt; - Github.com&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
