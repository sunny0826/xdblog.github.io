<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OAM on GuoXD Blog·郭旭东的博客</title>
    <link>https://guoxudong.io/categories/oam/</link>
    <description>Recent content in OAM on GuoXD Blog·郭旭东的博客</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a rel=&#39;license&#39; href=&#39;http://creativecommons.org/licenses/by-nc/4.0/&#39; target=&#39;_blank&#39;&gt;知识共享署名-非商业性使用 4.0 国际许可协议&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 28 Jun 2020 14:53:23 +0800</lastBuildDate>
    
	    <atom:link href="https://guoxudong.io/categories/oam/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>以应用为中心：开放应用模型（OAM）初探</title>
      <link>https://guoxudong.io/post/start-oam/</link>
      <pubDate>Sun, 28 Jun 2020 14:53:23 +0800</pubDate>
      
      <guid>https://guoxudong.io/post/start-oam/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;不久前，Kubernetes 也迎来了他 6 岁的生日，在这 6 年中，从孵化之初的三足鼎立，到后来的一统天下，Kubernetes 成为容器编排领域的事实标准已经有段时间了。在这期间，云原生的概念开始深入人心，越来越的公司组织和开发者开始接受、了解、实践云原生。如今，已有无数的应用以容器的形式运行在各种版本 Kubernetes 中了。&lt;/p&gt;
&lt;h2 id=&#34;应用管理之惑&#34;&gt;应用管理之惑&lt;/h2&gt;
&lt;p&gt;然而我们慢慢发现，随着应用和服务数量、使用场景以及承载业务的增加，Kubernetes 资源越来越难以管理。比如，有时候可能多个运维人员重复为一个 Deployment 配置了多个 Service 或 Ingress，而在一个 namespace 中动辄就有上百个 Service，在这些 Service 中找到那些重复、无效、甚至错误的 Service 可不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;上面描述的只是运维人员内部可能存在的冲突，更多的冲突来自开发与运维人员之间，由于各自关注的角度不同，出现了对 Deployment 配置权的争夺，他们各自关心的字段不尽相同，但同时还要面对同一份 &lt;code&gt;deployment.yaml&lt;/code&gt;，这就是冲突的根源。我们的做法是使用 kustomize 将一份 &lt;code&gt;deployment.yaml&lt;/code&gt; 分成不同的 &lt;a href=&#34;https://kubernetes-sigs.github.io/kustomize/api-reference/glossary/#overlay&#34;&gt;overlays&lt;/a&gt;，将开发和运维关注的字段分开管理，而这只是缓兵之计，依旧没有一个统一的配置文件来描述整个应用，比如这个应用由几个 Deployment、Service、 Ingress 组成，一个新手如果想要查看一个资源相关的其他资源，只能通过 label 和“相似”的名称去找或者猜。而这样做显然是很危险的，这也是为什么我不敢轻易清理生产环境中无用的 Service 和 ConfigMap 的原因，你永远也想不到有什么地方可能引用了他们。&lt;/p&gt;
&lt;p&gt;相对标准 Kubernetes 资源，Operator 的管理难度就更大了，各式各样的 Operator 存在于我的 Kubernetes 集群中，&lt;code&gt;kubectl get crd&lt;/code&gt; 命令输出的结果更是长的可怕。&lt;/p&gt;
&lt;p&gt;而开放应用模型（OAM）可能是助我脱离苦海的一味良药。&lt;/p&gt;
&lt;h2 id=&#34;开放应用模型oam&#34;&gt;开放应用模型（OAM）&lt;/h2&gt;
&lt;p&gt;OAM 是阿里云与 Azure 在 2019 年末联合推出的标准化云原生应用管理模型。相比于传统 PaaS 封闭、不能同“以 Operator 为基础的云原生生态”衔接的现状，基于 OAM 和 Kubernetes 构建的现代云原生应用管理平台，本质上是一个 &lt;strong&gt;“以应用为中心”&lt;/strong&gt; 的 Kubernetes ，保证了这个应用平台在能够无缝接入整个云原生生态。同时，OAM 可以进一步屏蔽掉容器基础设施的复杂性和差异性，为平台的使用者带来低心智负担的、标准化的、一致的应用管理与交付体验。&lt;/p&gt;
&lt;p&gt;所谓 “应用模型”，其实是一个专门用来对云原生应用本身和它所需运维能力进行定义与描述的标准开源规范。所以对于 Kubernetes 来说，OAM 即是一个标准的“应用定义”项目（类比已经不再活跃的 Kubernetes Application CRD 项目），同时也是一个专注于封装、组织和管理 Kubernetes 中各种 “运维能力”、以及连接 “运维能力” 与 “应用” 的平台层项目。而通过 “定义应用” 和 “组织管理应用的运维能力” 这两大核心功能，我们可以构建一个更容易管理、维护和发展的云原生平台。&lt;/p&gt;
&lt;p&gt;以下是 OAM 的一些基本概念：&lt;/p&gt;
&lt;h3 id=&#34;component&#34;&gt;Component&lt;/h3&gt;
&lt;p&gt;在 OAM 中，&lt;strong&gt;Component（组件）&lt;/strong&gt; 就是一个完全面向业务研发人员设计的、用于定义应用程序而不必考虑其运维详细信息的载体。一个应用程序包含一个或多个 Component 。例如，一个网站应用可以由一个 Java web 组件和一个数据库组件组成。&lt;/p&gt;
&lt;p&gt;OAM 中的 Component 包含两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作负载描述 —— 如何运行此 Component，以及它的运行内容，实际上就是一个完整的 K8s CR；&lt;/li&gt;
&lt;li&gt;可重写参数列表 —— 研发通过这个字段表示该 Component 的哪些字段后续可以被运维或者系统覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trait&#34;&gt;Trait&lt;/h3&gt;
&lt;p&gt;在 OAM 中，我们通过 &lt;strong&gt;Trait（运维特征）&lt;/strong&gt; 来描述和构建具备可发现性和可管理性的平台层能力。&lt;/p&gt;
&lt;p&gt;Trait 是与 Component 绑定的，一个 Component 可以绑定多个 Trait，从而把运维能力也加入到应用描述中，方便底层基础设施统一管理。&lt;/p&gt;
&lt;h3 id=&#34;application-configuration&#34;&gt;Application Configuration&lt;/h3&gt;
&lt;p&gt;最终，通过引用 Component 名称并对它绑定 Trait ，运维人员就可以使用 &lt;strong&gt;ApplicationConfiguration（应用配置）&lt;/strong&gt; 来实例化应用程序。ApplicationConfiguration 的主要功能，就是让应用运维人员（或系统）了解和使用业务研发人员传达的信息，然后自由的为 Component 组合绑定不同的运维能力以相应实现其最终的运维目的。&lt;/p&gt;
&lt;p&gt;下面这张图很好的描述了 OAM 架构的使用场景，开发与运维的&lt;strong&gt;关注点分离&lt;/strong&gt;，而最终都由一份 &lt;code&gt;ApplicationConfiguration&lt;/code&gt; 来描述整个应用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tvax4.sinaimg.cn/large/ad5fbf65ly1gg82h3v1o1j20jg0bg77i.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;上手实践&#34;&gt;上手实践&lt;/h2&gt;
&lt;p&gt;上面只是对 OAM 进行了简单的介绍，由于篇幅有限，如 Scope 这样的概念并没有进行介绍，更多内容欢迎加入 &lt;a href=&#34;https://oam.dev/&#34;&gt;OAM 社区&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面就以一个简单的示例，开启我们的 OAM 之旅：&lt;/p&gt;
&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;
&lt;p&gt;本示例为官方示例，使用 OAM 部署一个 &lt;code&gt;nginx&lt;/code&gt; 应用，该应用包含 Deployment、Service 和 Ingress。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 集群&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://helm.sh/docs/intro/&#34;&gt;Helm 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装控制端&#34;&gt;安装控制端&lt;/h3&gt;
&lt;h4 id=&#34;安装-crossplane-和-oam&#34;&gt;安装 Crossplane 和 OAM&lt;/h4&gt;
&lt;p&gt;注意，这里的 &lt;code&gt;crossplane-oam-sample&lt;/code&gt; 是官方维护的一个 crossplane 示例，只是用作开发和演示，并不是生产可用，关于 crossplane 的更多内容，请见&lt;a href=&#34;https://crossplane.io/&#34;&gt;项目官网&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm repo add oam https://oam-dev.github.io/crossplane-oam-sample/archives/
$ kubectl create namespace oam-system
$ helm install crossplane --namespace oam-system oam/crossplane-oam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里如果由于墙的原因无法拉取 &lt;code&gt;gcr.io/kubebuilder/kube-rbac-proxy:v0.4.1&lt;/code&gt; 镜像，导致 &lt;code&gt;crossplane-oam-localstack&lt;/code&gt; 无法启动的话，可以使用我提供的替代镜像 &lt;code&gt;guoxudongdocker/kube-rbac-proxy:v0.4.1&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;拉取示例仓库&#34;&gt;拉取示例仓库&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/oam-dev/catalog.git
&lt;span style=&#34;color:#75715e&#34;&gt;# 进入示例&lt;/span&gt;
$ cd catalog/traits/ingresstrait
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-crd-并启动-controller&#34;&gt;部署 CRD 并启动 controller&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 部署 CRD&lt;/span&gt;
$ make install
~/go/bin/controller-gen &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crd:trivialVersions=true&amp;#34;&lt;/span&gt; rbac:roleName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;manager-role webhook paths&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./...&amp;#34;&lt;/span&gt; output:crd:artifacts:config&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;config/crd/bases
kustomize build config/crd | kubectl apply -f -
customresourcedefinition.apiextensions.k8s.io/ingresstraits.core.oam.dev created
&lt;span style=&#34;color:#75715e&#34;&gt;# 启动 IngressTrait controller&lt;/span&gt;
$ go run main.go
I0629 11:15:22.035708     &lt;span style=&#34;color:#ae81ff&#34;&gt;802&lt;/span&gt; request.go:621&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Throttling request took 1.000526734s, request: GET:https://192.168.4.210:6443/apis/apiregistration.k8s.io/v1?timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32s
2020-06-29T11:15:22.088+0800    INFO    controller-runtime.metrics      metrics server is starting to listen    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
2020-06-29T11:15:22.089+0800    INFO    setup   starting manager
2020-06-29T11:15:22.089+0800    INFO    controller-runtime.manager      starting metrics server &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/metrics&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
2020-06-29T11:15:22.089+0800    INFO    controller-runtime.controller   Starting EventSource    &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ingresstrait&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind source: /, Kind=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
2020-06-29T11:15:22.193+0800    INFO    controller-runtime.controller   Starting Controller     &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ingresstrait&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
2020-06-29T11:15:22.193+0800    INFO    controller-runtime.controller   Starting workers        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;controller&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ingresstrait&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;worker count&amp;#34;&lt;/span&gt;: 1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于这里只是简单演示，没有将 IngressTrait controller 打包成镜像，而是在本地运行 controller，所以需要 go 环境。&lt;/p&gt;
&lt;h3 id=&#34;部署应用&#34;&gt;部署应用&lt;/h3&gt;
&lt;h4 id=&#34;配置-rbac&#34;&gt;配置 RBAC&lt;/h4&gt;
&lt;p&gt;使用命令：&lt;code&gt;kubectl apply -f rbac.yaml&lt;/code&gt;，配置 RBAC。这里需要注意的是官方 IngressTrait 的 sample 示例中并没有 &lt;code&gt;rbac.yaml&lt;/code&gt;，需要我们自己配置，否则的话会在部署时由于权限原因无法拉起 Deployment。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: rbac.authorization.k8s.io/v1
&lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: ClusterRole
&lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: deployment-clusterrole-poc
&lt;span style=&#34;color:#66d9ef&#34;&gt;rules&lt;/span&gt;:
- &lt;span style=&#34;color:#66d9ef&#34;&gt;apiGroups&lt;/span&gt;:
  - apps
  &lt;span style=&#34;color:#66d9ef&#34;&gt;resources&lt;/span&gt;:
  - deployments
  &lt;span style=&#34;color:#66d9ef&#34;&gt;verbs&lt;/span&gt;:
  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;

---
&lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: rbac.authorization.k8s.io/v1
&lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: ClusterRoleBinding
&lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: component-deployment-workload-poc
&lt;span style=&#34;color:#66d9ef&#34;&gt;roleRef&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;apiGroup&lt;/span&gt;: rbac.authorization.k8s.io
  &lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: ClusterRole
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: deployment-clusterrole-poc
&lt;span style=&#34;color:#66d9ef&#34;&gt;subjects&lt;/span&gt;:
  - &lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: ServiceAccount
    &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: crossplane-oam              &lt;span style=&#34;color:#75715e&#34;&gt;# Remember to use the actual ServiceAccount name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt;: oam-system             &lt;span style=&#34;color:#75715e&#34;&gt;# Remember to use the actual ServiceAccount namespace&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-component&#34;&gt;部署 Component&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;kubectl apply -f sample_component.yaml &lt;/code&gt; 命令部署 Component，该 Component 中的 workload 为 Deployment。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: core.oam.dev/v1alpha2
&lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: Component
&lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: example-deploy
&lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;workload&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: apps/v1
    &lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: Deployment
    &lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: web
    &lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;selector&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;matchLabels&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;app&lt;/span&gt;: test
      &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;labels&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;app&lt;/span&gt;: test
        &lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;containers&lt;/span&gt;:
            - &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: nginx
              &lt;span style=&#34;color:#66d9ef&#34;&gt;image&lt;/span&gt;: nginx:&lt;span style=&#34;color:#ae81ff&#34;&gt;1.17&lt;/span&gt;
              &lt;span style=&#34;color:#66d9ef&#34;&gt;ports&lt;/span&gt;:
                - &lt;span style=&#34;color:#66d9ef&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
                  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;部署-applicationconfiguration&#34;&gt;部署 ApplicationConfiguration&lt;/h4&gt;
&lt;p&gt;可以看到这个 ApplicationConfiguration 中包含一个 Component，而 Component 中又绑定了 一个 IngressTrait 类型的 Trait，由于这只是一个简单示例，所有只有一个 Component 和一个 Trait，在实际的生产环境中，一个 ApplicationConfiguration 可由多个 Component 组成，一个 Component 又可绑定多个 Trait 为其提供诸如流量管控、弹性伸缩等运维特性。&lt;/p&gt;
&lt;p&gt;使用命令：&lt;code&gt;kubectl apply -f sample_application_config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: core.oam.dev/v1alpha2
&lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: ApplicationConfiguration
&lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: example-appconfig
&lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;components&lt;/span&gt;:
    - &lt;span style=&#34;color:#66d9ef&#34;&gt;componentName&lt;/span&gt;: example-deploy
      &lt;span style=&#34;color:#66d9ef&#34;&gt;traits&lt;/span&gt;:
        - &lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;apiVersion&lt;/span&gt;: core.oam.dev/v1alpha2
            &lt;span style=&#34;color:#66d9ef&#34;&gt;kind&lt;/span&gt;: IngressTrait
            &lt;span style=&#34;color:#66d9ef&#34;&gt;metadata&lt;/span&gt;:
              &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;: example-ingress-trait
            &lt;span style=&#34;color:#66d9ef&#34;&gt;spec&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;rules&lt;/span&gt;:
                  - &lt;span style=&#34;color:#66d9ef&#34;&gt;host&lt;/span&gt;: nginx.oam.com
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;paths&lt;/span&gt;:
                      - &lt;span style=&#34;color:#66d9ef&#34;&gt;path&lt;/span&gt;: /
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;backend&lt;/span&gt;:
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;serviceName&lt;/span&gt;: deploy-test
                          &lt;span style=&#34;color:#66d9ef&#34;&gt;servicePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;检查结果&#34;&gt;检查结果&lt;/h4&gt;
&lt;p&gt;可以看到 Deployment、Service 和 Ingress 已经部署成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get deploy,svc,ing
NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/web   1/1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           8m29s

NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    AGE
service/deploy-test   ClusterIP   10.43.170.228   &amp;lt;none&amp;gt;        8080/TCP   8m29s

NAME                                       HOSTS           ADDRESS                       PORTS   AGE
ingress.extensions/example-ingress-trait   nginx.oam.com   192.168.1.129,192.168.4.210   &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;      8m29s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host: nginx.oam.com&amp;#34;&lt;/span&gt;  http://192.168.1.129
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        width: 35em;
        margin: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://nginx.org/&amp;#34;&lt;/span&gt;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://nginx.com/&amp;#34;&lt;/span&gt;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用的整体结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://tva4.sinaimg.cn/large/ad5fbf65gy1gg94rq5fyij20ef0drdgg.jpg&#34; alt=&#34;OMA&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;通过上面这个简单的示例，可以看出如果遵循 OAM 模型来划分应用，我们可以从 ApplicationConfiguration 入手，看到应用中都包含哪些组件（Component），同时又可以看到每个组件都有哪些运维特性（Trait）来支持这个组件，逐层的查看每个模块的描述和配置，最终全面了解这个应用，而不用像现在这样使用 label 和 name，漫无目的的靠运气来理清整个架构，真正的做到&lt;strong&gt;以应用为中心&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;OAM 的本质是将云原生应用定义中的研发、运维关注点分离，资源对象进行进一步抽象，化繁为简，包罗万象。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rRaHl5a5PU9Xg5psMservA?from=timeline&amp;amp;isappinstalled=0&amp;amp;scene=2&amp;amp;clicktime=1588769747&amp;amp;enterid=1588769747&#34;&gt;深度解读！阿里统一应用管理架构升级的教训与实践 - CSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/oam-dev/catalog&#34;&gt;oam-dev/catalog - github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
